## These templates are not used by the minisvd2nim program.
## Instead, these templates are used by the code generated by minisvd2nim.
## This allows the programmer to change the final form of the Nim source
## without changing and recompiling minisvd2nim.

# First some types that the templates will need
type RegisterVal = uint32

template declareDevice*(
    deviceName: untyped,
    mpuPresent: static bool,
    fpuPresent: static bool,
    nvicPrioBits: static int,
): untyped =
  # Device details
  const DEVICE* {.inject.} = astToStr(deviceName)
  const MPU_PRESET* {.inject.} = mpuPresent
  const FPU_PRESENT* {.inject.} = fpuPresent
  const NVIC_PRIO_BITS* {.inject.} = nvicPrioBits

template declarePeripheral*(
    peripheralName: untyped, baseAddress: static uint32, peripheralDesc: static string
): untyped =
  type `peripheralName Base` {.inject.} = distinct RegisterVal
  const peripheralName* {.inject.} = `peripheralName Base`(baseAddress)

template declareInterrupt*(
    peripheralName: untyped,
    interruptName: untyped,
    interruptValue: static int,
    interruptDesc: static string,
): untyped =
  const `irq interruptName`* {.inject.} = interruptValue # `interruptDesc`

template declareRegister*(
    peripheralName: untyped,
    registerName: untyped,
    addressOffset: static uint32,
    registerDesc: static string,
): untyped =
  type `peripheralName _ registerName Val`* {.inject.} = distinct RegisterVal
  type `peripheralName _ registerName Ptr` {.inject.} =
    ptr `peripheralName _ registerName Val`

  const `peripheralName _ registerName` {.inject.} =
    cast[`peripheralName _ registerName Ptr`](`peripheralName`.uint32 + addressOffset)
  template `registerName`*(
      base: static `peripheralName Base`
  ): `peripheralName _ registerName Val` =
    volatileLoad(`registerName _ peripheralName`)

  template `registerName=`*(
      base: static `peripheralName Base`, val: `peripheralName _ registerName Val`
  ) =
    volatileStore(`peripheralName _ registerName`, val)

template declareField*(
    peripheralName: untyped,
    registerName: untyped,
    fieldName: untyped,
    bitOffset: static int,
    bitWidth: static int,
    access: untyped,
    fieldDesc: static string,
) =
  discard
